import{eD as m,aN as k,ae as w,eE as g,aO as A,bm as f,aW as W,a7 as d,aw as h,aa as c,a$ as C}from"./index.a890a1de.js";import{h as T}from"./hasERC20Allowance-83cba492.browser.esm.0665f2db.js";import{i as u}from"./marketplace-0138b2c0.browser.esm.7147bcd6.js";import{b as v}from"./QueryParams-1a366d99.browser.esm.b689a7c0.js";import{a as y,b as I,G as E,C as $}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{C as b,a as R}from"./contract-owner-acb6dbd4.browser.esm.9c46ab5d.js";import{C as S}from"./contract-roles-96577e74.browser.esm.2ca5c113.js";import{S as P}from"./erc-721-standard-c3e8d5c6.browser.esm.9326ee5c.js";import"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";import"./index.244ea9bd.js";import"./treeify.2855ae70.js";import"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";import"./erc-721-2f25ddb1.browser.esm.ad9a4fcd.js";import"./drop-claim-conditions-1d735fac.browser.esm.e65778c2.js";class l extends P{static contractRoles=m;constructor(r,e,n){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},t=arguments.length>4?arguments[4]:void 0,a=arguments.length>5?arguments[5]:void 0,s=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new k(r,e,t,o,n);super(s,n,a),this.abi=w.parse(t||[]),this.metadata=new y(this.contractWrapper,g,this.storage),this.app=new I(this.contractWrapper,this.metadata,this.storage),this.roles=new S(this.contractWrapper,l.contractRoles),this.encoder=new A(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.events=new $(this.contractWrapper),this.royalties=new b(this.contractWrapper,this.metadata),this.owner=new R(this.contractWrapper)}async getWrappedContents(r){const e=await this.contractWrapper.read("getWrappedContents",[r]),n=[],o=[],t=[];for(const a of e)switch(a.tokenType){case 0:{const s=await f(this.contractWrapper.getProvider(),a.assetContract);n.push({contractAddress:a.assetContract,quantity:W(a.totalAmount,s.decimals)});break}case 1:{o.push({contractAddress:a.assetContract,tokenId:a.tokenId});break}case 2:{t.push({contractAddress:a.assetContract,tokenId:a.tokenId,quantity:a.totalAmount.toString()});break}}return{erc20Tokens:n,erc721Tokens:o,erc1155Tokens:t}}wrap=d(async(r,e,n)=>{const[o,t,a]=await Promise.all([v(e,this.storage),this.toTokenStructList(r),h(n||await this.contractWrapper.getSignerAddress())]);return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[t,o,a],parse:s=>{const i=this.contractWrapper.parseLogs("TokensWrapped",s?.logs);if(i.length===0)throw new Error("TokensWrapped event not found");const p=i[0].args.tokenIdOfWrappedToken;return{id:p,receipt:s,data:()=>this.get(p)}}})});unwrap=d(async(r,e)=>{const n=await h(e||await this.contractWrapper.getSignerAddress());return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[r,n]})});async toTokenStructList(r){const e=[],n=this.contractWrapper.getProvider(),o=await this.contractWrapper.getSignerAddress();if(r.erc20Tokens)for(const t of r.erc20Tokens){const a=await C(n,t.quantity,t.contractAddress);if(!await T(this.contractWrapper,t.contractAddress,a))throw new Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${t.quantity});

`);e.push({assetContract:t.contractAddress,totalAmount:a,tokenId:0,tokenType:0})}if(r.erc721Tokens)for(const t of r.erc721Tokens){if(!await u(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});

`);e.push({assetContract:t.contractAddress,totalAmount:0,tokenId:t.tokenId,tokenType:1})}if(r.erc1155Tokens)for(const t of r.erc1155Tokens){if(!await u(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);e.push({assetContract:t.contractAddress,totalAmount:t.quantity,tokenId:t.tokenId,tokenType:2})}return e}async prepare(r,e,n){return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:e,overrides:n})}async call(r,e,n){return this.contractWrapper.call(r,e,n)}}export{l as Multiwrap};
