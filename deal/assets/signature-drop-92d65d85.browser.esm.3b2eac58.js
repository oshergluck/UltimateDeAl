import{D as c}from"./QueryParams-1a366d99.browser.esm.b689a7c0.js";import{et as h,aN as u,ae as d,eG as C,aO as y,bF as g,B as s,b2 as f,A as w,a7 as o,aa as W}from"./index.a890a1de.js";import{a as T,b,G as S,C as A}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{C as N}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as E,D as R,a as U}from"./contract-owner-acb6dbd4.browser.esm.9c46ab5d.js";import{C as k}from"./contract-platform-fee-1b7488fe.browser.esm.17f43390.js";import{C as M}from"./contract-roles-96577e74.browser.esm.2ca5c113.js";import{C as F}from"./contract-sales-eafd7bcb.browser.esm.30a70f96.js";import{D as I}from"./drop-claim-conditions-1d735fac.browser.esm.e65778c2.js";import{S as x}from"./erc-721-standard-c3e8d5c6.browser.esm.9326ee5c.js";import{a as p}from"./erc-721-2f25ddb1.browser.esm.ad9a4fcd.js";import{P as D}from"./thirdweb-checkout-f66628dc.browser.esm.83f8e9c7.js";import"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";import"./index.244ea9bd.js";import"./treeify.2855ae70.js";import"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";class m extends x{static contractRoles=h;constructor(t,r,a){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new u(t,r,n,e,a);super(l,a,i),this.abi=d.parse(n||[]),this.metadata=new T(this.contractWrapper,C,this.storage),this.app=new b(this.contractWrapper,this.metadata,this.storage),this.roles=new M(this.contractWrapper,m.contractRoles),this.royalties=new E(this.contractWrapper,this.metadata),this.sales=new F(this.contractWrapper),this.encoder=new y(this.contractWrapper),this.estimator=new S(this.contractWrapper),this.events=new A(this.contractWrapper),this.platformFees=new k(this.contractWrapper),this.interceptor=new N(this.contractWrapper),this.claimConditions=new I(this.contractWrapper,this.metadata,this.storage),this.signature=new p(this.contractWrapper,this.storage),this.revealer=new R(this.contractWrapper,this.storage,g.name,()=>this.erc721.nextTokenIdToMint()),this.signature=new p(this.contractWrapper,this.storage),this.owner=new U(this.contractWrapper),this.checkout=new D(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,r]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(r)}async getAllClaimed(t){const r=s.from(t?.start||0).toNumber(),a=s.from(t?.count||c).toNumber(),e=Math.min((await this.totalClaimedSupply()).toNumber(),r+a);return await Promise.all(Array.from(Array(e).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){const r=s.from(t?.start||0).toNumber(),a=s.from(t?.count||c).toNumber(),e=s.from(Math.max((await this.totalClaimedSupply()).toNumber(),r)),n=s.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),e.toNumber()+a));return await Promise.all(Array.from(Array(n.sub(e).toNumber()).keys()).map(i=>this.erc721.getTokenMetadata(e.add(i).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[f("transfer"),w])}createBatch=o(async(t,r)=>this.erc721.lazyMint.prepare(t,r));async getClaimTransaction(t,r,a){return this.erc721.getClaimTransaction(t,r,a)}claimTo=o(async(t,r,a)=>this.erc721.claimTo.prepare(t,r,a));claim=o(async(t,r)=>this.erc721.claim.prepare(t,r));burn=o(async t=>this.erc721.burn.prepare(t));async prepare(t,r,a){return W.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{m as SignatureDrop};
