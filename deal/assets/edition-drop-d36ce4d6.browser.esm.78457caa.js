import{et as p,aN as m,ae as h,eu as l,aO as u,b2 as d,A as g,a7 as s,aa as C,B as f}from"./index.a890a1de.js";import{a as w,b as y,C as W,G as A}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{C as T}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as E,a as R}from"./contract-owner-acb6dbd4.browser.esm.9c46ab5d.js";import{C as b}from"./contract-platform-fee-1b7488fe.browser.esm.17f43390.js";import{C as k}from"./contract-roles-96577e74.browser.esm.2ca5c113.js";import{C as S}from"./contract-sales-eafd7bcb.browser.esm.30a70f96.js";import{D as v}from"./erc-1155-c458d8f7.browser.esm.69f2720a.js";import{S as O}from"./erc-1155-standard-d0e2d023.browser.esm.d8647057.js";import{P as N}from"./thirdweb-checkout-f66628dc.browser.esm.83f8e9c7.js";import"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";import"./QueryParams-1a366d99.browser.esm.b689a7c0.js";import"./index.244ea9bd.js";import"./treeify.2855ae70.js";import"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";class B{constructor(t){this.events=t}async getAllClaimerAddresses(t){const a=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&f.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(t):!1);return Array.from(new Set(a.filter(r=>typeof r.data?.claimer=="string").map(r=>r.data.claimer)))}}class o extends O{static contractRoles=p;constructor(t,a,r){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new m(t,a,n,e,r);super(i,r,c),this.abi=h.parse(n),this.metadata=new w(this.contractWrapper,l,this.storage),this.app=new y(this.contractWrapper,this.metadata,this.storage),this.roles=new k(this.contractWrapper,o.contractRoles),this.royalties=new E(this.contractWrapper,this.metadata),this.sales=new S(this.contractWrapper),this.claimConditions=new v(this.contractWrapper,this.metadata,this.storage),this.events=new W(this.contractWrapper),this.history=new B(this.events),this.encoder=new u(this.contractWrapper),this.estimator=new A(this.contractWrapper),this.platformFees=new b(this.contractWrapper),this.interceptor=new T(this.contractWrapper),this.checkout=new N(this.contractWrapper),this.owner=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,a){return this.erc1155.getOwned(t,a)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[d("transfer"),g])}createBatch=s(async(t,a)=>this.erc1155.lazyMint.prepare(t,a));async getClaimTransaction(t,a,r){let e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,a,r,{checkERC20Allowance:e})}claimTo=s((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(a,r,e,{checkERC20Allowance:n})}})());claim=s((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const n=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(n,a,r,e)}})());burnTokens=s(async(t,a)=>this.erc1155.burn.prepare(t,a));async prepare(t,a,r){return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}}export{o as EditionDrop};
