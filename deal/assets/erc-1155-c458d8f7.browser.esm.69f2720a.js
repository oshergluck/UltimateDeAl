import{aI as at,B as C,A as H,aR as N,b4 as rt,aw as m,a7 as l,aa as w,aO as A,b5 as M,b6 as S,b7 as Y,b8 as P,b9 as G,ba as et,bb as k,bc as K,bd as J,be as X,bf as nt,bg as x,c as _,bh as I,bi as st,bj as it,y as ot,aN as ct,bk as pt,t as L,ay as v,aP as lt,ag as ht,bl as q,a$ as dt,aA as ut,az as mt}from"./index.a890a1de.js";import{a as b}from"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";import{d as y,h as D,a as gt}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{F as ft,a as yt,u as R,D as F,b as wt}from"./QueryParams-1a366d99.browser.esm.b689a7c0.js";import{c as Ct,D as Wt}from"./contract-owner-acb6dbd4.browser.esm.9c46ab5d.js";import{t as O,l as U,n as z,C as W,c as V,f as bt,p as Et,b as Tt,d as $,e as Q,u as At,g as Mt,S as j,h as St,i as Pt,M as vt}from"./index.244ea9bd.js";import{s as It}from"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";class Nt{constructor(t,a,r){this.storage=r,this.contractWrapper=t,this.metadata=a}async getActive(t,a){const r=await this.get(t),e=await this.metadata.get();return await O(r,0,this.contractWrapper.getProvider(),e.merkle,this.storage,a?.withAllowList||!1)}async get(t,a){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return U(r)}else if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return U(e)}else if(this.isNewSinglePhaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]);return z(r)}else if(this.isNewMultiphaseDrop(this.contractWrapper)){const r=a!==void 0?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return z(e)}else throw new Error("Contract does not support claim conditions")}async getAll(t,a){if(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]),e=r.currentStartId.toNumber(),n=r.count.toNumber(),s=[];for(let o=e;o<e+n;o++)s.push(await this.get(t,o));const c=await this.metadata.get();return Promise.all(s.map(o=>O(o,0,this.contractWrapper.getProvider(),c.merkle,this.storage,a?.withAllowList||!1)))}else return[await this.getActive(t,a)]}async canClaim(t,a,r){return r&&(r=await m(r)),(await this.getClaimIneligibilityReasons(t,a,r)).length===0}async getClaimIneligibilityReasons(t,a,r){const e=[];let n,s;if(r===void 0)try{r=await this.contractWrapper.getSignerAddress()}catch(i){console.warn("failed to get signer address",i)}if(!r)return[W.NoWallet];const c=await m(r);try{s=await this.getActive(t)}catch(i){return x(i,"!CONDITION")||x(i,"no active mint condition")||x(i,"DropNoActiveCondition")?(e.push(W.NoClaimConditionSet),e):(e.push(W.Unknown),e)}if(s.availableSupply!=="unlimited"&&C.from(s.availableSupply).lt(a))return e.push(W.NotEnoughSupply),e;const p=_(s.merkleRootHash).length>0;let h=null;if(p){if(h=await this.getClaimerProofs(t,c),!h&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return e.push(W.AddressNotAllowed),e;if(h)try{const i=await this.prepareClaim(t,a,!1,c);let u;if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[u]=await this.contractWrapper.read("verifyClaimMerkleProof",[n,c,t,a,i.proofs,i.maxClaimable]),!u)return e.push(W.AddressNotAllowed),e}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([u]=await this.contractWrapper.read("verifyClaimMerkleProof",[t,c,a,{proof:i.proofs,maxQuantityInAllowlist:i.maxClaimable}]),!u)return e.push(W.AddressNotAllowed),e}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[t,c,a,i.currencyAddress,i.price,{proof:i.proofs,quantityLimitPerWallet:i.maxClaimable,currency:i.currencyAddressInProof,pricePerToken:i.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),await this.contractWrapper.read("verifyClaim",[n,c,t,a,i.currencyAddress,i.price,{proof:i.proofs,quantityLimitPerWallet:i.maxClaimable,currency:i.currencyAddressInProof,pricePerToken:i.priceInProof}]))}catch(i){switch(console.warn("Merkle proof verification failed:","reason"in i?i.reason||i.errorName:i),i.reason||i.errorName){case"!Qty":case"DropClaimExceedLimit":e.push(W.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":case"DropClaimInvalidTokenPrice":e.push(W.WrongPriceOrCurrency);break;case"!MaxSupply":case"DropClaimExceedMaxSupply":e.push(W.NotEnoughSupply);break;case"cant claim yet":case"DropClaimNotStarted":e.push(W.ClaimPhaseNotStarted);break;default:{e.push(W.AddressNotAllowed);break}}return e}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let i=C.from(0),u=V(s.maxClaimablePerWallet,0);try{i=await this.getSupplyClaimedByWallet(t,c)}catch{}if(h&&(u=V(h.maxClaimable,0)),u.gt(0)&&u.lt(i.add(a)))return e.push(W.OverMaxClaimablePerWallet),e;if((!p||p&&!h)&&(u.lte(i)||u.eq(0)))return e.push(W.AddressNotAllowed),e}let[g,d]=[C.from(0),C.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(n=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[g,d]=await this.contractWrapper.read("getClaimTimestamp",[t,n,c])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([g,d]=await this.contractWrapper.read("getClaimTimestamp",[t,c]));const f=C.from(Date.now()).div(1e3);if(g.gt(0)&&f.lt(d))return d.eq(I)?e.push(W.AlreadyClaimed):e.push(W.WaitBeforeNextClaimTransaction),e;if(s.price.gt(0)&&st()){const i=s.price.mul(a),u=this.contractWrapper.getProvider();if(it(s.currencyAddress))(await u.getBalance(c)).lt(i)&&e.push(W.NotEnoughTokens);else{const T=(await ot(()=>import("./index.a890a1de.js").then(tt=>tt.hj),["assets/index.a890a1de.js","assets/index.999128e1.css"])).default;(await new ct(u,s.currencyAddress,T,{},this.storage).read("balanceOf",[c])).lt(i)&&e.push(W.NotEnoughTokens)}}return e}async getClaimerProofs(t,a,r){const n=(await this.get(t,r)).merkleRoot;if(_(n).length>0){const c=await this.metadata.get(),o=await m(a);return await bt(o,n.toString(),c.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}else return null}async getSupplyClaimedByWallet(t,a){const r=await m(a);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){const e=await this.contractWrapper.read("getActiveClaimConditionId",[t]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,e,r])}throw new Error("This contract does not support the getSupplyClaimedByWallet function")}set=l((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;return t.setBatch.prepare([{tokenId:a,claimConditions:r}],e)}})());setBatch=l((()=>{var t=this;return async function(a){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;const e={},n=await Promise.all(a.map(async o=>{let{tokenId:p,claimConditions:h}=o,g=h;if(t.isLegacySinglePhaseDrop(t.contractWrapper)){if(r=!0,h.length===0)g=[{startTime:new Date(0),currencyAddress:H,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:pt([0],32),snapshot:[]}];else if(h.length>1)throw new Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed")}(t.isNewSinglePhaseDrop(t.contractWrapper)||t.isNewMultiphaseDrop(t.contractWrapper))&&g.forEach(i=>{if(i.snapshot&&i.snapshot.length>0&&(i.maxClaimablePerWallet===void 0||i.maxClaimablePerWallet==="unlimited"))throw new Error(`maxClaimablePerWallet must be set to a specific value when an allowlist is set.
Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.

ex:
contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])`);if(i.snapshot&&i.snapshot.length>0&&i.maxClaimablePerWallet?.toString()==="0"&&i.snapshot.map(u=>typeof u=="string"?0:Number(u.maxClaimable?.toString()||0)).reduce((u,T)=>u+T,0)===0)throw new Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")});const{snapshotInfos:d,sortedConditions:f}=await Et(g,0,t.contractWrapper.getProvider(),t.storage,t.getSnapshotFormatVersion());return d.forEach(i=>{e[i.merkleRoot]=i.snapshotUri}),{tokenId:p,sortedConditions:f}})),s=await t.metadata.get(),c=[];for(const o of Object.keys(s.merkle||{}))e[o]=s.merkle[o];if(!Tt(s.merkle,e)){const o=await t.metadata.parseInputMetadata({...s,merkle:e}),p=await t.metadata._parseAndUploadMetadata(o);if(D("setContractURI",t.contractWrapper)){const h=new A(t.contractWrapper);c.push(h.encode("setContractURI",[p]))}else throw new Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.")}if(n.forEach(o=>{let{tokenId:p,sortedConditions:h}=o;const g=new A(t.contractWrapper);if(t.isLegacySinglePhaseDrop(t.contractWrapper)){const d=new A(t.contractWrapper);c.push(d.encode("setClaimConditions",[p,$(h[0]),r]))}else if(t.isLegacyMultiPhaseDrop(t.contractWrapper))c.push(g.encode("setClaimConditions",[p,h.map($),r]));else if(t.isNewSinglePhaseDrop(t.contractWrapper))c.push(g.encode("setClaimConditions",[p,Q(h[0]),r]));else if(t.isNewMultiphaseDrop(t.contractWrapper))c.push(g.encode("setClaimConditions",[p,h.map(Q),r]));else throw new Error("Contract does not support claim conditions")}),D("multicall",t.contractWrapper))return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[c]});throw new Error("Contract does not support multicall")}})());update=l(async(t,a,r)=>{const e=await this.getAll(t),n=await At(a,r,e);return await this.set.prepare(t,n)});async prepareClaim(t,a,r,e){const n=await m(e||await this.contractWrapper.getSignerAddress());return Mt(n,a,await this.getActive(t),async()=>(await this.metadata.get()).merkle,0,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(t,a,r,e){const n=await m(a);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,e.proofs,e.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable},L("")]:[n,t,r,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,pricePerToken:e.priceInProof,currency:e.currencyAddressInProof},L("")]}async getClaimTransaction(t,a,r,e){if(e?.pricePerToken)throw new Error("Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`");const n=await this.prepareClaim(a,r,e?.checkERC20Allowance||!0);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(a,t,r,n),overrides:n.overrides})}isNewSinglePhaseDrop(t){return y(t,"ERC1155ClaimConditionsV2")}isNewMultiphaseDrop(t){return y(t,"ERC1155ClaimPhasesV2")}isLegacySinglePhaseDrop(t){return y(t,"ERC1155ClaimConditionsV1")}isLegacyMultiPhaseDrop(t){return y(t,"ERC1155ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?j.V1:j.V2}}const Z=(()=>v.object({address:ut,quantity:mt.default(1)}))(),Dt=(()=>v.union([v.array(v.string()).transform(async E=>await Promise.all(E.map(t=>Z.parseAsync({address:t})))),v.array(Z)]))();class Rt{featureName=k.name;constructor(t){this.contractWrapper=t}async getClaimTransaction(t,a,r,e){let n={};return e&&e.pricePerToken&&(n=await Ct(this.contractWrapper,e.pricePerToken,r,e.currencyAddress,e.checkERC20Allowance)),w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[await m(t),a,r],overrides:n})}to=l(async(t,a,r,e)=>await this.getClaimTransaction(t,a,r,e))}class xt{featureName=K.name;constructor(t,a){this.contractWrapper=t,this.storage=a;const r=new gt(this.contractWrapper,lt,this.storage);this.conditions=new Nt(t,r,this.storage)}to=l(async(t,a,r,e)=>await this.conditions.getClaimTransaction(t,a,r,e))}class kt{featureName=J.name;constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.roles=r}mint=l(async t=>{const a=t.payload,r=t.signature,[e,n]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await It(this.contractWrapper,e.pricePerToken.mul(e.quantity),a.currencyAddress,n),w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:n,parse:s=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return{id:c[0].args.tokenIdMinted,receipt:s}}})});mintBatch=l(async t=>{const a=await Promise.all(t.map(s=>this.mapPayloadToContractStruct(s.payload))),r=t.map((s,c)=>{const o=a[c],p=s.signature,h=s.payload.price;if(C.from(h).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:o,signature:p}}),e=new A(this.contractWrapper),n=r.map(s=>e.encode("mintWithSignature",[s.message,s.signature]));if(D("multicall",this.contractWrapper))return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:s=>{const c=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(c.length===0)throw new Error("No MintWithSignature event found");return c.map(o=>({id:o.args.tokenIdMinted,receipt:s}))}});throw new Error("Multicall not supported on this contract!")});async verify(t){const a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){const a={...t,tokenId:I};return this.generateFromTokenId(a)}async generateFromTokenId(t){return(await this.generateBatchFromTokenIds([t]))[0]}async generateBatch(t){const a=t.map(r=>({...r,tokenId:I}));return this.generateBatchFromTokenIds(a)}async generateBatchFromTokenIds(t){const a=this.contractWrapper.getSigner();ht(a,"No signer available"),await this.roles?.verify(["minter"],await a.getAddress());const r=await Promise.all(t.map(d=>St.parseAsync(d))),e=r.map(d=>d.metadata),[n,s,c]=await Promise.all([R(e,this.storage),this.contractWrapper.getChainID(),q(this.contractWrapper.address,this.contractWrapper.getProvider())]),o=await Promise.all(r.map((d,f)=>Pt.parseAsync({...d,uri:n[f]}))),p=await Promise.all(o.map(d=>this.mapPayloadToContractStruct(d))),h=c?.type==="TokenERC1155";return(await Promise.all(p.map(d=>this.contractWrapper.signTypedData(a,{name:h?"TokenERC1155":"SignatureMintERC1155",version:"1",chainId:s,verifyingContract:this.contractWrapper.address},{MintRequest:vt},d)))).map((d,f)=>({payload:o[f],signature:d.toString()}))}async mapPayloadToContractStruct(t){const a=await dt(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:a,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}}class Lt{featureName=P.name;constructor(t){this.contractWrapper=t}tokens=l(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.from.prepare(r,t,a)});from=l(async(t,a,r)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await m(t),a,r]}));batch=l(async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.batchFrom.prepare(r,t,a)});batchFrom=l(async(t,a,r)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnBatch",args:[await m(t),a,r]}))}class Bt{featureName=M.name;constructor(t,a){this.erc1155=t,this.contractWrapper=a}async all(t){const a=C.from(t?.start||0).toNumber(),r=C.from(t?.count||F).toNumber(),e=Math.min((await this.totalCount()).toNumber(),a+r);return await Promise.all([...Array(e-a).keys()].map(n=>this.erc1155.get((a+n).toString())))}async totalCount(){return await this.contractWrapper.read("nextTokenIdToMint",[])}async totalCirculatingSupply(t){return await this.contractWrapper.read("totalSupply",[t])}async owned(t,a){const[r,e]=await Promise.all([m(t||await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("nextTokenIdToMint",[])]);let s=(await this.contractWrapper.read("balanceOfBatch",[Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys())])).map((o,p)=>({tokenId:p,balance:o})).filter(o=>o.balance.gt(0));if(a){const o=a?.start||0,p=a?.count||F;s=s.slice(o,o+p)}return(await Promise.all(s.map(o=>this.erc1155.get(o.tokenId.toString())))).map((o,p)=>({...o,owner:r,quantityOwned:s[p].balance.toString()}))}}class _t{featureName=G.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.revealer=this.detectErc1155Revealable()}lazyMint=l(async(t,a)=>{const r=await this.erc1155.nextTokenIdToMint(),e=await R(t,this.storage,r.toNumber(),a),n=e[0].substring(0,e[0].lastIndexOf("/"));for(let o=0;o<e.length;o++){const p=e[o].substring(0,e[o].lastIndexOf("/"));if(n!==p)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${n}' but got '${p}'`)}const s=o=>{const p=this.contractWrapper.parseLogs("TokensLazyMinted",o?.logs),h=p[0].args.startTokenId,g=p[0].args.endTokenId,d=[];for(let f=h;f.lte(g);f=f.add(1))d.push({id:f,receipt:o,data:()=>this.erc1155.getTokenMetadata(f)});return d},c=await q(this.contractWrapper.address,this.contractWrapper.getProvider());return this.isLegacyEditionDropContract(this.contractWrapper,c)?w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`],parse:s}):w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${n.endsWith("/")?n:`${n}/`}`,L("")],parse:s})});updateMetadata=l(async(t,a,r)=>{const e=await this.contractWrapper.read("getBaseURICount",[]);if(e.eq(0))throw new Error("No base URI set. Please set a base URI before updating metadata");const n=C.from(t);let s=C.from(0),c=C.from(0),o=0;for(let i=0;i<e.toNumber()&&(o=i,c=await this.contractWrapper.read("getBatchIdAtIndex",[o]),!c.gt(n));i++)s=c;const p=Array.from({length:c.sub(s).toNumber()},(i,u)=>u+s.toNumber()),h=await Promise.all(p.map(i=>this.erc1155.getTokenMetadata(i))),g=[];for(let i=0;i<h.length;i++){const{id:u,uri:T,...B}=h[i];C.from(n).eq(C.from(u))?g.push(a):g.push(B)}const d=await R(g,this.storage,s.toNumber(),r),f=d[0].substring(0,d[0].lastIndexOf("/"));return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[o,`${f.endsWith("/")?f:`${f}/`}`]})});detectErc1155Revealable(){if(y(this.contractWrapper,"ERC1155Revealable"))return new Wt(this.contractWrapper,this.storage,X.name,()=>this.erc1155.nextTokenIdToMint())}isLegacyEditionDropContract(t,a){return a&&a.type==="DropERC1155"&&a.version<3||!1}}class Ft{featureName=Y.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r}to=l(async(t,a)=>{const r=a.map(p=>p.metadata),e=a.map(p=>p.supply),n=await R(r,this.storage),s=await m(t),c=new A(this.contractWrapper),o=await Promise.all(n.map(async(p,h)=>c.encode("mintTo",[s,I,p,e[h]])));return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[o],parse:p=>{const h=this.contractWrapper.parseLogs("TokensMinted",p.logs);if(h.length===0||h.length<r.length)throw new Error("TokenMinted event not found, minting failed");return h.map(g=>{const d=g.args.tokenIdMinted;return{id:d,receipt:p,data:()=>this.erc1155.get(d)}})}})})}class Ot{featureName=S.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.batch=this.detectErc1155BatchMintable()}to=l(async(t,a)=>{const r=await this.getMintTransaction(t,a);return r.setParse(e=>{const n=this.contractWrapper.parseLogs("TransferSingle",e?.logs);if(n.length===0)throw new Error("TransferSingleEvent event not found");const s=n[0].args.id;return{id:s,receipt:e,data:()=>this.erc1155.get(s.toString())}}),r});async getMintTransaction(t,a){const r=await wt(a.metadata,this.storage);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await m(t),I,r,a.supply]})}additionalSupplyTo=l(async(t,a,r)=>{const e=await this.erc1155.getTokenMetadata(a);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await m(t),a,e.uri,r],parse:n=>({id:C.from(a),receipt:n,data:()=>this.erc1155.get(a)})})});detectErc1155BatchMintable(){if(y(this.contractWrapper,"ERC1155BatchMintable"))return new Ft(this.erc1155,this.contractWrapper,this.storage)}}class Yt{featureName=at.name;get chainId(){return this._chainId}constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.query=this.detectErc1155Enumerable(),this.mintable=this.detectErc1155Mintable(),this.burnable=this.detectErc1155Burnable(),this.lazyMintable=this.detectErc1155LazyMintable(),this.signatureMintable=this.detectErc1155SignatureMintable(),this.claimCustom=this.detectErc1155Claimable(),this.claimWithConditions=this.detectErc1155ClaimableWithConditions(),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const[a,r]=await Promise.all([this.contractWrapper.read("totalSupply",[t]).catch(()=>C.from(0)),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...ft}))]);return{owner:H,metadata:r,type:"ERC1155",supply:a.toString()}}async totalSupply(t){if(y(this.contractWrapper,"ERC1155Supply"))return await this.contractWrapper.read("totalSupply",[t]);throw new N(rt)}async balanceOf(t,a){return await this.contractWrapper.read("balanceOf",[await m(t),a])}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,a){return await this.contractWrapper.read("isApprovedForAll",[await m(t),await m(a)])}transfer=l((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const s=await t.contractWrapper.getSignerAddress();return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[s,await m(a),r,e,n]})}})());transferBatch=l((()=>{var t=this;return async function(a,r,e,n){let s=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];const c=n?await m(n):await t.contractWrapper.getSignerAddress();return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeBatchTransferFrom",args:[c,await m(a),r,e,s]})}})());transferFrom=l((()=>{var t=this;return async function(a,r,e,n){let s=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[0];return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[await m(a),await m(r),e,n,s]})}})());setApprovalForAll=l(async(t,a)=>w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[t,a]}));airdrop=l((()=>{var t=this;return async function(a,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:[0];const s=e?await m(e):await t.contractWrapper.getSignerAddress(),c=await t.balanceOf(s,a),o=await Dt.parseAsync(r),p=o.reduce((d,f)=>C.from(d).add(C.from(f?.quantity||1)),C.from(0));if(c.lt(C.from(p)))throw new Error(`The caller owns ${c.toString()} NFTs, but wants to airdrop ${p.toString()} NFTs.`);const h=new A(t.contractWrapper),g=o.map(d=>{let{address:f,quantity:i}=d;return h.encode("safeTransferFrom",[s,f,a,i,n])});return w.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[g]})}})());async nextTokenIdToMint(){if(D("nextTokenIdToMint",this.contractWrapper))return await this.contractWrapper.read("nextTokenIdToMint",[]);throw new Error("Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint")}async getAll(t){return b(this.query,M).all(t)}async totalCount(){return b(this.query,M).totalCount()}async totalCirculatingSupply(t){return b(this.query,M).totalCirculatingSupply(t)}async getOwned(t,a){return t&&(t=await m(t)),b(this.query,M).owned(t,a)}mint=l(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=l(async(t,a)=>b(this.mintable,S).to.prepare(t,a));async getMintTransaction(t,a){return b(this.mintable,S).getMintTransaction(t,a)}mintAdditionalSupply=l(async(t,a)=>b(this.mintable,S).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(),t,a));mintAdditionalSupplyTo=l(async(t,a,r)=>b(this.mintable,S).additionalSupplyTo.prepare(t,a,r));mintBatch=l(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintBatchTo=l(async(t,a)=>b(this.mintable?.batch,Y).to.prepare(t,a));burn=l(async(t,a)=>b(this.burnable,P).tokens.prepare(t,a));burnFrom=l(async(t,a,r)=>b(this.burnable,P).from.prepare(t,a,r));burnBatch=l(async(t,a)=>b(this.burnable,P).batch.prepare(t,a));burnBatchFrom=l(async(t,a,r)=>b(this.burnable,P).batchFrom.prepare(t,a,r));lazyMint=l(async(t,a)=>b(this.lazyMintable,G).lazyMint.prepare(t,a));updateMetadata=l(async(t,a)=>{if(this.lazyMintable)return this.lazyMintable.updateMetadata.prepare(t,a);if(y(this.contractWrapper,"ERC1155UpdatableMetadata")){const r=await this.storage.upload(a);return w.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,r]})}else throw new N(et)});async getClaimTransaction(t,a,r,e){const n=this.claimWithConditions,s=this.claimCustom;if(n)return n.conditions.getClaimTransaction(t,a,r,e);if(s)return s.getClaimTransaction(t,a,r,e);throw new N(k)}claim=l(async(t,a,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a,r));claimTo=l(async(t,a,r,e)=>{const n=this.claimWithConditions,s=this.claimCustom;if(n)return n.to.prepare(t,a,r,e);if(s)return s.to.prepare(t,a,r,e);throw new N(k)});get claimConditions(){return b(this.claimWithConditions,K).conditions}get signature(){return b(this.signatureMintable,J)}get revealer(){return b(this.lazyMintable?.revealer,X)}async getTokenMetadata(t){const a=await this.contractWrapper.read("uri",[t]);if(!a)throw new nt;return yt(t,a,this.storage)}detectErc1155Enumerable(){if(y(this.contractWrapper,"ERC1155Enumerable"))return new Bt(this,this.contractWrapper)}detectErc1155Mintable(){if(y(this.contractWrapper,"ERC1155Mintable"))return new Ot(this,this.contractWrapper,this.storage)}detectErc1155Burnable(){if(y(this.contractWrapper,"ERC1155Burnable"))return new Lt(this.contractWrapper)}detectErc1155LazyMintable(){if(y(this.contractWrapper,"ERC1155LazyMintableV1")||y(this.contractWrapper,"ERC1155LazyMintableV2"))return new _t(this,this.contractWrapper,this.storage)}detectErc1155SignatureMintable(){if(y(this.contractWrapper,"ERC1155SignatureMintable"))return new kt(this.contractWrapper,this.storage)}detectErc1155Claimable(){if(y(this.contractWrapper,"ERC1155ClaimCustom"))return new Rt(this.contractWrapper)}detectErc1155ClaimableWithConditions(){if(y(this.contractWrapper,"ERC1155ClaimConditionsV1")||y(this.contractWrapper,"ERC1155ClaimConditionsV2")||y(this.contractWrapper,"ERC1155ClaimPhasesV1")||y(this.contractWrapper,"ERC1155ClaimPhasesV2"))return new xt(this.contractWrapper,this.storage)}}export{Nt as D,Yt as E,kt as a};
