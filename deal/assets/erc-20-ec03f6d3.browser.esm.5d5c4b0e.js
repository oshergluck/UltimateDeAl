import{aG as S,bm as M,aw as i,a7 as n,aa as p,aO as E,bn as W,bo as b,bp as y,bq as w,br as C,bs as N,B as f,bt as A,az as B,ag as v,a$ as _,aP as O}from"./index.a890a1de.js";import{a as l}from"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";import{d as h,a as R}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{D as z}from"./drop-claim-conditions-1d735fac.browser.esm.e65778c2.js";import{s as F}from"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";import{j as I,k as V,m as D}from"./index.244ea9bd.js";async function U(m,t){const r=await m.read("decimals",[]);return A(B.parse(t),r)}class K{featureName=y.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}tokens=n(async t=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]}));from=n(async(t,r)=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([i(t),this.erc20.normalizeAmount(r)])}))}class L{featureName=w.name;constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a;const e=new R(this.contractWrapper,O,this.storage);this.conditions=new z(this.contractWrapper,e,this.storage)}to=n(async(t,r,a)=>{const e=await this.erc20.normalizeAmount(r);return await this.conditions.getClaimTransaction(t,e,a)})}class k{constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a,this.claim=new L(this.erc20,this.contractWrapper,this.storage)}}class G{featureName=b.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}to=n(async t=>{const r=new E(this.contractWrapper),e=(await Promise.all(t.map(s=>Promise.all([i(s.toAddress),this.erc20.normalizeAmount(s.amount)])))).map(s=>{let[c,u]=s;return r.encode("mintTo",[c,u])});return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[e]})})}class j{featureName=W.name;constructor(t,r){this.erc20=t,this.contractWrapper=r,this.batch=this.detectErc20BatchMintable()}to=n(async(t,r)=>await this.getMintTransaction(t,r));async getMintTransaction(t,r){return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([i(t),this.erc20.normalizeAmount(r)])})}detectErc20BatchMintable(){if(h(this.contractWrapper,"ERC20BatchMintable"))return new G(this.erc20,this.contractWrapper)}}class q{featureName=C.name;constructor(t,r){this.contractWrapper=t,this.roles=r}mint=n(async t=>{const r=t.payload,a=t.signature,[e,s]=await Promise.all([this.mapPayloadToContractStruct(r),this.contractWrapper.getCallOverrides()]);return await F(this.contractWrapper,f.from(e.price),r.currencyAddress,s),p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,a],overrides:s})});mintBatch=n(async t=>{const r=await Promise.all(t.map(c=>this.mapPayloadToContractStruct(c.payload))),a=t.map((c,u)=>{const g=r[u],o=c.signature,d=c.payload.price;if(f.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:g,signature:o}}),e=new E(this.contractWrapper),s=a.map(c=>e.encode("mintWithSignature",[c.message,c.signature]));return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[s]})});async verify(t){const r=t.payload,a=t.signature,e=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.read("verify",[e,a]))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles?.verify(["minter"],await this.contractWrapper.getSignerAddress());const[r,a,e]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map(o=>I.parseAsync(o)))]),s=this.contractWrapper.getSigner();v(s,"No signer available");const c=await Promise.all(e.map(o=>V.parseAsync(o))),u=await Promise.all(c.map(o=>this.mapPayloadToContractStruct(o))),g=await Promise.all(u.map(o=>this.contractWrapper.signTypedData(s,{name:a,version:"1",chainId:r,verifyingContract:this.contractWrapper.address},{MintRequest:D},o)));return e.map((o,d)=>{const T=c[d],P=g[d];return{payload:T,signature:P.toString()}})}async mapPayloadToContractStruct(t){const[r,a]=await Promise.all([_(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),e=A(t.quantity,a);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:e,price:r,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}}class Y{featureName=S.name;get chainId(){return this._chainId}constructor(t,r,a){this.contractWrapper=t,this.storage=r,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=a}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await M(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await i(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){const[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),i(t)]);return await this.allowanceOf(r,a)}async allowanceOf(t,r){const a=await Promise.all([i(t),i(r)]);return await this.getValue(await this.contractWrapper.read("allowance",a))}transfer=n(async(t,r)=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([i(t),this.normalizeAmount(r)])}));transferFrom=n(async(t,r,a)=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([i(t),i(r),this.normalizeAmount(a)])}));setAllowance=n(async(t,r)=>p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([i(t),this.normalizeAmount(r)])}));transferBatch=n(async t=>{const r=new E(this.contractWrapper),a=(await Promise.all(t.map(e=>Promise.all([this.normalizeAmount(e.amount),i(e.toAddress)])))).map(e=>{let[s,c]=e;return r.encode("transfer",[c,s])});return p.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})});mint=n(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=n(async(t,r)=>l(this.mintable,W).to.prepare(t,r));async getMintTransaction(t,r){return l(this.mintable,W).getMintTransaction(t,r)}mintBatchTo=n(async t=>l(this.mintable?.batch,b).to.prepare(t));burn=n(async t=>l(this.burnable,y).tokens.prepare(t));burnFrom=n(async(t,r)=>l(this.burnable,y).from.prepare(t,r));claim=n(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r));claimTo=n(async(t,r,a)=>l(this.droppable?.claim,w).to.prepare(t,r,a));get claimConditions(){return l(this.droppable?.claim,w).conditions}get signature(){return l(this.signatureMintable,C)}async normalizeAmount(t){return U(this.contractWrapper,t)}async getValue(t){return await N(this.contractWrapper.getProvider(),this.getAddress(),f.from(t))}detectErc20Mintable(){if(h(this.contractWrapper,"ERC20"))return new j(this,this.contractWrapper)}detectErc20Burnable(){if(h(this.contractWrapper,"ERC20Burnable"))return new K(this,this.contractWrapper)}detectErc20Droppable(){if(h(this.contractWrapper,"ERC20ClaimConditionsV1")||h(this.contractWrapper,"ERC20ClaimConditionsV2")||h(this.contractWrapper,"ERC20ClaimPhasesV1")||h(this.contractWrapper,"ERC20ClaimPhasesV2"))return new k(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if(h(this.contractWrapper,"ERC20SignatureMintable"))return new q(this.contractWrapper)}}export{Y as E,q as a};
