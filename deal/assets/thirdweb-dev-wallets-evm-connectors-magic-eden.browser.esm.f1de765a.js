import{_ as h,c3 as d,cb as u,c6 as a,g as p,cc as m,es as g}from"./index.a890a1de.js";import{InjectedConnector as l}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm.0de1dfa5.js";class C extends l{constructor(e){const n={...{name:"Magic Eden",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:g},...e.options};super({chains:e.chains,options:n,connectorStorage:e.connectorStorage}),h(this,"id",d.magicEden)}async connect(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const t=await this.getProvider();if(!t)throw new u;this.setupListeners(),this.emit("message",{type:"connecting"});let n=null;if(this.options?.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))&&(n=await this.getAccount().catch(()=>null),!!n))try{await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(r){if(this.isUserRejectedRequestError(r))throw new a(r)}if(!n){const i=await t.request({method:"eth_requestAccounts"});n=p(i[0])}let s=await this.getChainId(),o=this.isChainUnsupported(s);if(e.chainId&&s!==e.chainId)try{await this.switchChain(e.chainId),s=e.chainId,o=this.isChainUnsupported(e.chainId)}catch(i){console.error(`Could not switch to chain id : ${e.chainId}`,i)}this.options?.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const c={chain:{id:s,unsupported:o},provider:t,account:n};return this.emit("connect",c),c}catch(t){throw this.isUserRejectedRequestError(t)?new a(t):t.code===-32002?new m(t):t}}}export{C as MagicEdenConnector};
