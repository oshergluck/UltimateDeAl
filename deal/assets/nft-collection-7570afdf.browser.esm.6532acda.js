import{et as p,aN as h,ae as m,eF as u,aO as d,b2 as l,A as C,a7 as e,aa as g}from"./index.a890a1de.js";import{a as W,b as f,G as w,C as y}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";import{C as T}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as R,a as b}from"./contract-owner-acb6dbd4.browser.esm.9c46ab5d.js";import{C as S}from"./contract-platform-fee-1b7488fe.browser.esm.17f43390.js";import{C as E}from"./contract-roles-96577e74.browser.esm.2ca5c113.js";import{C as A}from"./contract-sales-eafd7bcb.browser.esm.30a70f96.js";import{S as B}from"./erc-721-standard-c3e8d5c6.browser.esm.9326ee5c.js";import{a as F}from"./erc-721-2f25ddb1.browser.esm.ad9a4fcd.js";import"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";import"./QueryParams-1a366d99.browser.esm.b689a7c0.js";import"./index.244ea9bd.js";import"./treeify.2855ae70.js";import"./assertEnabled-e1dff38a.browser.esm.4361dd7c.js";import"./drop-claim-conditions-1d735fac.browser.esm.e65778c2.js";class s extends B{static contractRoles=p;constructor(t,r,a){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new h(t,r,n,o,a);super(c,a,i),this.abi=m.parse(n||[]),this.metadata=new W(this.contractWrapper,u,this.storage),this.app=new f(this.contractWrapper,this.metadata,this.storage),this.roles=new E(this.contractWrapper,s.contractRoles),this.royalties=new R(this.contractWrapper,this.metadata),this.sales=new A(this.contractWrapper),this.encoder=new d(this.contractWrapper),this.estimator=new w(this.contractWrapper),this.events=new y(this.contractWrapper),this.platformFees=new S(this.contractWrapper),this.interceptor=new T(this.contractWrapper),this.signature=new F(this.contractWrapper,this.storage),this.owner=new b(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[l("transfer"),C])}mint=e(async t=>this.erc721.mint.prepare(t));mintTo=e(async(t,r)=>this.erc721.mintTo.prepare(t,r));async getMintTransaction(t,r){return this.erc721.getMintTransaction(t,r)}mintBatch=e(async t=>this.erc721.mintBatch.prepare(t));mintBatchTo=e(async(t,r)=>this.erc721.mintBatchTo.prepare(t,r));burn=e(t=>this.erc721.burn.prepare(t));async prepare(t,r,a){return g.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{s as NFTCollection};
