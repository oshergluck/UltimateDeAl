import{a as m,B as i,bk as b,y as u,z as l}from"./index.a890a1de.js";import{a as d,C as E}from"./setErc20Allowance-204eaca5.browser.esm.52b9c268.js";const g=(()=>m("0x80ac58cd"))(),y=(()=>m("0xd9b67a26"))(),w={name:"Failed to load NFT metadata"};async function C(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof Buffer<"u"){const o=a.split(",")[1],s=JSON.parse(Buffer.from(o,"base64").toString("utf-8"));return d.parse({...s,id:i.from(t).toString(),uri:a})}const n=a.replace("{id}",b(i.from(t).toHexString(),32).slice(2));let r;try{r=await e.downloadJSON(n)}catch{const s=a.replace("{id}",i.from(t).toString());try{r=await e.downloadJSON(s)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),r=w}}return d.parse({...r,id:i.from(t).toString(),uri:a})}async function O(t,a,e,n){let r;const o=(await u(()=>import("./IERC165.d81707d1.js"),[])).default,s=new l(t,o,a),[p,_]=await Promise.all([s.supportsInterface(g),s.supportsInterface(y)]);if(p){const c=(await u(()=>import("./index.a890a1de.js").then(f=>f.hl),["assets/index.a890a1de.js","assets/index.999128e1.css"])).default;r=await new l(t,c,a).tokenURI(e)}else if(_){const c=(await u(()=>import("./index.a890a1de.js").then(f=>f.hn),["assets/index.a890a1de.js","assets/index.999128e1.css"])).default;r=await new l(t,c,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return r?C(e,r,n):d.parse({...w,id:i.from(e).toString(),uri:""})}async function F(t,a){return typeof t=="string"?t:await a.upload(E.parse(t))}async function S(t,a,e,n){if(R(t))return t;if(I(t))return await a.uploadBatch(t.map(o=>E.parse(o)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:n?.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function A(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const n=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==n)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${n}'`)}return a.replace(/\/$/,"")+"/"}function R(t){return t.find(a=>typeof a!="string")===void 0}function I(t){return t.find(a=>typeof a!="object")===void 0}const x=100;export{x as D,w as F,g as I,C as a,F as b,y as c,O as f,A as g,S as u};
