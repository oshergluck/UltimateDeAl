import{aC as W,ag as i,b2 as p,a7 as g,aO as b,aw as l,aa as f,b3 as P}from"./index.a890a1de.js";import{h as A}from"./contract-appuri-5179a994.browser.esm.c8757e2e.js";class N{featureName=W.name;constructor(e,t){this.contractWrapper=e,this.roles=t}async getAll(){i(this.roles.length,"this contract has no support for roles");const e={},t=Object.entries(this.roles);return(await Promise.all(t.map(r=>{let[,s]=r;return this.get(s)}))).forEach((r,s)=>e[t[s][1]]=r),e}async get(e){i(this.roles.includes(e),`this contract does not support the "${e}" role`);const t=this.contractWrapper;if(A("getRoleMemberCount",t)&&A("getRoleMember",t)){const r=p(e),s=(await t.read("getRoleMemberCount",[r])).toNumber();return await Promise.all(Array.from(Array(s).keys()).map(a=>t.read("getRoleMember",[r,a])))}throw new Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.")}setAll=g(async(e,t)=>{const r=t||await this.contractWrapper.getSignerAddress(),s=new b(this.contractWrapper),a=Object.keys(e);i(a.length,"you must provide at least one role to set"),i(a.every(n=>this.roles.includes(n)),"this contract does not support the given role");const h=await this.getAll(),m=[],w=a.sort(n=>n==="admin"?1:-1);for(let n=0;n<w.length;n++){const d=w[n],[R,v]=await Promise.all([Promise.all(e[d]?.map(o=>l(o))||[]),Promise.all(h[d]?.map(o=>l(o))||[])]),y=R.filter(o=>!v.includes(o)),c=v.filter(o=>!R.includes(o));if(c.length>1){const o=c.indexOf(r);o>-1&&(c.splice(o,1),c.push(r))}y.length&&y.forEach(o=>{m.push(s.encode("grantRole",[p(d),o]))}),c.length&&(await Promise.all(c.map(u=>this.getRevokeRoleFunctionName(u)))).forEach((u,C)=>m.push(s.encode(u,[p(d),c[C]])))}return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[m]})});async verify(e,t){await Promise.all(e.map(async r=>{const[s,a]=await Promise.all([this.get(r),l(t)]);if(!s.map(h=>h.toLowerCase()).includes(a.toLowerCase()))throw new P(a,r)}))}grant=g(async(e,t)=>{i(this.roles.includes(e),`this contract does not support the "${e}" role`);const r=await l(t);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"grantRole",args:[p(e),r]})});revoke=g(async(e,t)=>{i(this.roles.includes(e),`this contract does not support the "${e}" role`);const r=await l(t),s=await this.getRevokeRoleFunctionName(r);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:s,args:[p(e),r]})});async getRevokeRoleFunctionName(e){const[t,r]=await Promise.all([l(e),this.contractWrapper.getSignerAddress()]);return r.toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}}export{N as C};
